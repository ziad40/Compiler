METHOD_BODY
METHOD_BODY -> STATEMENT_LIST 
STATEMENT_LIST -> STATEMENT STATEMENT_LIST2 
STATEMENT -> DECLARATION 
DECLARATION -> PRIMITIVE_TYPE id ; 
PRIMITIVE_TYPE -> int 
STATEMENT_LIST2 -> STATEMENT STATEMENT_LIST2 
STATEMENT -> ASSIGNMENT 
ASSIGNMENT -> id = EXPRESSION ; 
Error: top stack rule = != token assign, Stack Pop =
Error: parsing table[EXPRESSION][assign] is Empty, Discard input token assign
EXPRESSION -> SIMPLE_EXPRESSION EXPRESSION2 
SIMPLE_EXPRESSION -> TERM SIMPLE_EXPRESSION2 
TERM -> FACTOR TERM2 
FACTOR -> num 
TERM2 -> eps 
SIMPLE_EXPRESSION2 -> eps 
EXPRESSION2 -> eps 
STATEMENT_LIST2 -> STATEMENT STATEMENT_LIST2 
STATEMENT -> IF 
IF -> if ( EXPRESSION ) { STATEMENT } else { STATEMENT } 
EXPRESSION -> SIMPLE_EXPRESSION EXPRESSION2 
SIMPLE_EXPRESSION -> TERM SIMPLE_EXPRESSION2 
TERM -> FACTOR TERM2 
FACTOR -> id 
TERM2 -> eps 
SIMPLE_EXPRESSION2 -> eps 
EXPRESSION2 -> relop SIMPLE_EXPRESSION 
SIMPLE_EXPRESSION -> TERM SIMPLE_EXPRESSION2 
TERM -> FACTOR TERM2 
FACTOR -> num 
TERM2 -> eps 
SIMPLE_EXPRESSION2 -> eps 
STATEMENT -> ASSIGNMENT 
ASSIGNMENT -> id = EXPRESSION ; 
Error: top stack rule = != token assign, Stack Pop =
Error: parsing table[EXPRESSION][assign] is Empty, Discard input token assign
EXPRESSION -> SIMPLE_EXPRESSION EXPRESSION2 
SIMPLE_EXPRESSION -> TERM SIMPLE_EXPRESSION2 
TERM -> FACTOR TERM2 
FACTOR -> num 
TERM2 -> eps 
SIMPLE_EXPRESSION2 -> eps 
EXPRESSION2 -> eps 
Error: top stack rule else != token $, Stack Pop else
Error: top stack rule { != token $, Stack Pop {
Error: parsing table[STATEMENT][$] is Sync, Discard input token $
Error: top stack rule } != token $, Stack Pop }
STATEMENT_LIST2 -> eps 
Parsed Successfully
